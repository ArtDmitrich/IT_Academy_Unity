//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""MainScene"",
            ""id"": ""45794738-5292-4bc3-848c-4e34c423892e"",
            ""actions"": [
                {
                    ""name"": ""RotatePlatform"",
                    ""type"": ""Value"",
                    ""id"": ""e8a15ebb-7146-494b-9a3b-ed35389bf16a"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e6dde746-e092-4d98-88b0-b4cf790f9bf0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlatform"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""83bc4915-be53-4fa9-bb0b-0c8f93788cec"",
                    ""path"": ""<Touchscreen>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlatform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""01a9eac7-9b9b-4c46-b248-0f4bdbd70967"",
                    ""path"": ""<Touchscreen>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlatform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainScene
        m_MainScene = asset.FindActionMap("MainScene", throwIfNotFound: true);
        m_MainScene_RotatePlatform = m_MainScene.FindAction("RotatePlatform", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainScene
    private readonly InputActionMap m_MainScene;
    private List<IMainSceneActions> m_MainSceneActionsCallbackInterfaces = new List<IMainSceneActions>();
    private readonly InputAction m_MainScene_RotatePlatform;
    public struct MainSceneActions
    {
        private @GameInput m_Wrapper;
        public MainSceneActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatePlatform => m_Wrapper.m_MainScene_RotatePlatform;
        public InputActionMap Get() { return m_Wrapper.m_MainScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainSceneActions set) { return set.Get(); }
        public void AddCallbacks(IMainSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_MainSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainSceneActionsCallbackInterfaces.Add(instance);
            @RotatePlatform.started += instance.OnRotatePlatform;
            @RotatePlatform.performed += instance.OnRotatePlatform;
            @RotatePlatform.canceled += instance.OnRotatePlatform;
        }

        private void UnregisterCallbacks(IMainSceneActions instance)
        {
            @RotatePlatform.started -= instance.OnRotatePlatform;
            @RotatePlatform.performed -= instance.OnRotatePlatform;
            @RotatePlatform.canceled -= instance.OnRotatePlatform;
        }

        public void RemoveCallbacks(IMainSceneActions instance)
        {
            if (m_Wrapper.m_MainSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_MainSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainSceneActions @MainScene => new MainSceneActions(this);
    public interface IMainSceneActions
    {
        void OnRotatePlatform(InputAction.CallbackContext context);
    }
}
